{"code":"/**\r\n * This function accepts as a parameter a function \"userFunc\"\r\n * And as a result returns an anonymous function.\r\n * This anonymous function, accepts as arguments,\r\n * the parameters to pass to the function \"useArgs\" and returns a Promise\r\n * This function can be used as a wrapper, only inside a Worker\r\n * because it depends by \"postMessage\".\r\n *\r\n * @param {Function} userFunc {Function} fn the function to run with web worker\r\n *\r\n * @returns {Function} returns a function that accepts the parameters\r\n * to be passed to the \"userFunc\" function\r\n */\r\nconst jobRunner = (options) => (e) => {\r\n    const [userFuncArgs] = e.data;\r\n    return Promise.resolve(options.fn(...userFuncArgs))\r\n        .then(result => {\r\n        const isTransferable = (val) => (('ArrayBuffer' in self && val instanceof ArrayBuffer)\r\n            || ('MessagePort' in self && val instanceof MessagePort)\r\n            || ('ImageBitmap' in self && val instanceof ImageBitmap)\r\n            || ('OffscreenCanvas' in self && val instanceof OffscreenCanvas));\r\n        const transferList = options.transferable === 'auto' && isTransferable(result) ? [result] : [];\r\n        // @ts-ignore\r\n        postMessage(['SUCCESS', result], transferList);\r\n    })\r\n        .catch(error => {\r\n        // @ts-ignore\r\n        postMessage(['ERROR', error]);\r\n    });\r\n};\r\nexport default jobRunner;\r\n//# sourceMappingURL=jobRunner.js.map","references":["/home/ib_admin/Desktop/KV/Work/git-repos/useWorker/packages/useWorker/src/useWorker.ts"],"map":"{\"version\":3,\"file\":\"jobRunner.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/lib/jobRunner.ts\"],\"names\":[],\"mappings\":\"AAQA;;;;;;;;;;;;GAYG;AACH,MAAM,SAAS,GAAG,CAAC,OAA2B,EAAY,EAAE,CAAC,CAAC,CAAe,EAAE,EAAE;IAC/E,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,IAAe,CAAA;IACxC,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC;SAChD,IAAI,CAAC,MAAM,CAAC,EAAE;QACb,MAAM,cAAc,GAAG,CAAC,GAAQ,EAAE,EAAE,CAAC,CACnC,CAAC,aAAa,IAAI,IAAI,IAAI,GAAG,YAAY,WAAW,CAAC;eAClD,CAAC,aAAa,IAAI,IAAI,IAAI,GAAG,YAAY,WAAW,CAAC;eACrD,CAAC,aAAa,IAAI,IAAI,IAAI,GAAG,YAAY,WAAW,CAAC;eACrD,CAAC,iBAAiB,IAAI,IAAI,IAAI,GAAG,YAAY,eAAe,CAAC,CACjE,CAAA;QACD,MAAM,YAAY,GAAU,OAAO,CAAC,YAAY,KAAK,MAAM,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QACrG,aAAa;QACb,WAAW,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,YAAY,CAAC,CAAA;IAChD,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE;QACb,aAAa;QACb,WAAW,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAA;IAC/B,CAAC,CAAC,CAAA;AACN,CAAC,CAAA;AAED,eAAe,SAAS,CAAA\"}","dts":{"name":"/home/ib_admin/Desktop/KV/Work/git-repos/useWorker/packages/useWorker/dist/lib/jobRunner.d.ts","writeByteOrderMark":false,"text":"import { TRANSFERABLE_TYPE } from 'src/useWorker';\r\ninterface JOB_RUNNER_OPTIONS {\r\n    fn: Function;\r\n    transferable: TRANSFERABLE_TYPE;\r\n}\r\n/**\r\n * This function accepts as a parameter a function \"userFunc\"\r\n * And as a result returns an anonymous function.\r\n * This anonymous function, accepts as arguments,\r\n * the parameters to pass to the function \"useArgs\" and returns a Promise\r\n * This function can be used as a wrapper, only inside a Worker\r\n * because it depends by \"postMessage\".\r\n *\r\n * @param {Function} userFunc {Function} fn the function to run with web worker\r\n *\r\n * @returns {Function} returns a function that accepts the parameters\r\n * to be passed to the \"userFunc\" function\r\n */\r\ndeclare const jobRunner: (options: JOB_RUNNER_OPTIONS) => Function;\r\nexport default jobRunner;\r\n"}}
